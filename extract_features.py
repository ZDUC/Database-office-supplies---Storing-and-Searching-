import os
import torch
import torchvision.transforms as transforms
from torchvision.models import resnet50, ResNet50_Weights
from PIL import Image
import numpy as np
from pymongo import MongoClient

# K·∫øt n·ªëi MongoDB
MONGO_URI = "mongodb+srv://zeros0000:d21httt06@database0.d6lmc.mongodb.net/?retryWrites=true&w=majority&appName=Database0"
client = MongoClient(MONGO_URI)
db = client["Database0"]
images_collection = db["images"]
features_collection = db["image_features"]

# ƒê∆∞·ªùng d·∫´n dataset
DATASET_PATH = "dataset_resized"

# Load m√¥ h√¨nh ResNet50
model = resnet50(weights=ResNet50_Weights.IMAGENET1K_V1)
model = torch.nn.Sequential(*list(model.children())[:-1])  # B·ªè l·ªõp Fully Connected
model.eval()

# Chuy·ªÉn ƒë·ªïi ·∫£nh
transform = transforms.Compose([
    transforms.Resize((256, 256)),   # Resize ·∫£nh v·ªÅ 256x256 tr∆∞·ªõc
    transforms.CenterCrop(224),      # C·∫Øt ch√≠nh gi·ªØa ·∫£nh ƒë·ªÉ ƒë·∫£m b·∫£o k√≠ch th∆∞·ªõc 224x224
    transforms.ToTensor(),           
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]) # Chu·∫©n h√≥a gi·ªëng ImageNet
])

# Duy·ªát dataset
for category in os.listdir(DATASET_PATH):
    category_path = os.path.join(DATASET_PATH, category)

    if os.path.isdir(category_path):
        for img_name in os.listdir(category_path):
            img_path = os.path.join(category_path, img_name)

            if img_name.lower().endswith(".jpg"):
                # Chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n
                img_path = os.path.normpath(img_path)

                # Ki·ªÉm tra xem ·∫£nh ƒë√£ t·ªìn t·∫°i trong DB ch∆∞a
                existing_image = features_collection.find_one({"image_path": img_path})
                if existing_image:
                    print(f"‚ö† ·∫¢nh ƒë√£ t·ªìn t·∫°i, b·ªè qua: {img_path}")
                    continue  # B·ªè qua n·∫øu ·∫£nh ƒë√£ t·ªìn t·∫°i

                # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
                image = Image.open(img_path).convert("RGB")
                image = transform(image).unsqueeze(0)

                with torch.no_grad():
                    feature = model(image).squeeze().numpy()

                # ƒê·∫£m b·∫£o ƒë·∫∑c tr∆∞ng l√† danh s√°ch 1D
                feature_list = feature.flatten().tolist()

                # L∆∞u v√†o database
                features_collection.insert_one({
                    "image_path": img_path,
                    "category": category,
                    "feature": feature_list
                })

                print(f"‚úÖ ƒê√£ l∆∞u ƒë·∫∑c tr∆∞ng c·ªßa: {img_path}")

print("üéâ Ho√†n th√†nh tr√≠ch xu·∫•t & l∆∞u v√†o MongoDB!")
